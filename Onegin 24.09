#include <iostream>
#include <string>
#include <cstdlib>
#include <cassert>
#include <cctype>


struct MyString
{
	char *strings;
	short length;
};



void ad(FILE *fout);
short sizeof_file(FILE *fin);
void input(char *buff, short size, FILE *fin, FILE *fout);
void SortStr();
short count_str(char *buff, short size);
void Choose_Point(char *buff, short count_of_str, short size, MyString* str);
int Compare_Function_Begin(const void* point_char1, const void* point_char2);
int Compare_Function_End(const void* point_char1, const void* point_char2);
void End(FILE *fout);
void sort_print(MyString* str, short count_of_str, FILE *fout);
void Begin(FILE *fout);

int main()
{
	SortStr();
}








//----------------------------------//
//This function does an adversement //
//of this sort function             //
//----------------------------------//


void ad(FILE *fout)
{
	fprintf(fout, "\t\t\t\tThis function can sort strings.\n"
		"\t\t\tPlease put the text into the file \"INPUT.txt\".\n");
}

//------------------------------------------//
//This function counts the digit of strings //
//in the input file                         //
//------------------------------------------//

short sizeof_file(FILE *fin)
{
	fseek(fin, 0, SEEK_END);

	short size(ftell(fin));

	fseek(fin, 0, SEEK_SET);

	return size;
}

//-----------------------------//
//This function reads the text //
//from the input file          //
//-----------------------------//


void input(char *buff, short size, FILE *fin, FILE *fout)
{
	fread(buff, sizeof(char), size, fin);
}



//-----------------------------------//
//This function as a main            //
//communicate with another functions //
//-----------------------------------//



void SortStr()
{
	FILE *fin, *fout;
	fopen_s(&fin, "INPUT.txt", "r");
	fopen_s(&fout, "OUTPUT.txt", "w");

	ad(fout);

	assert(fin);
	short sizebuff = sizeof_file(fin) + 1;
	if (sizebuff)
	{
		char *buff = (char*)calloc(sizebuff, sizeof(char));// ++

		input(buff, sizebuff, fin, fout);

		short count_of_str = count_str(buff, sizebuff);

		assert(count_of_str);

		MyString* str = (MyString*)calloc(count_of_str, sizeof(*str));

		Choose_Point(buff, count_of_str, sizebuff, str);

		for (int counter(0); counter < count_of_str; ++counter)
			str[counter].strings = &buff[str[counter].length];

		Begin(fout);

		qsort(str, count_of_str, sizeof(*str), Compare_Function_Begin);
		sort_print(str, count_of_str, fout);

		End(fout);

		qsort(str, count_of_str, sizeof(*str), Compare_Function_End);
		sort_print(str, count_of_str, fout);
	}
	



}

short count_str(char *buff, short size)
{
	short count_of_str(0);
	for (short counter(0); counter<size; counter++)
		if (buff[counter] == '\n')
		{
			count_of_str++;
			buff[counter] = '\0';
		}
	if (count_of_str != 1)
		count_of_str++;
	return count_of_str;
}


void Choose_Point(char *buff, short count_of_str, short size, MyString* str)
{
	short count_points(1);
	str[0].length = 0;

	for (short counter(1); counter < size; ++counter)
	{
		if ((buff[counter] == '\0') && (count_points<count_of_str))// !!!!!!!
		{
			str[count_points].length = counter + 1;
			count_points++;
		}
	}
}


int Compare_Function_Begin(const void* point_char1, const void* point_char2)
{
	MyString str1 = *(MyString*)point_char1;
	MyString str2 = *(MyString*)point_char2;
	while ((ispunct(*(str1).strings)) || (isspace(*(str1).strings))
		|| (ispunct(*(str1).strings)))
		(str1.strings)++;
	while ((ispunct(*(str2).strings)) || (isspace(*(str2).strings))
		|| (ispunct(*(str2).strings)))
		(str2.strings)++;
	return strcmp(str1.strings, str2.strings);
}


int Compare_Function_End(const void* point_char1, const void* point_char2)
{
	MyString str1 = *(MyString*)point_char1;
	MyString str2 = *(MyString*)point_char2;
	short counter(0);
	while (str1.strings[str1.length - counter] == str2.strings[str2.length - counter])
		counter++;

	return (str1.strings[str1.length - counter]- str2.strings[str2.length - counter]);
}







void Begin(FILE *fout)
{
	fprintf(fout, "\n\n\nText after sort ascending:\n\n\n\n");
}



void sort_print(MyString* str, short count_of_str, FILE *fout)
{
	for (int counter(0); counter < count_of_str; ++counter)
		fprintf(fout, "%s\n", str[counter].strings);
}

void End(FILE *fout)
{
	fprintf(fout, "\n\n\nText after sort for rhymes:\n\n\n\n");
}
