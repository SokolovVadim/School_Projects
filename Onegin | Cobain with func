#include <iostream>
#include <cstdio>

using namespace std;

short countstr = 41;// concrete solution


//*ptr = string.end
//if ('a' < *ptr < 'z' || 'A' < *ptr < 'Z') do_something
//else ptr--;
FILE *fin, *fout;

char buff[840][50];
char cont[840][50];
int g;

void input(char buff[840][50]);
int placement(char buffer[]);
void search(char buffer[50], char *point);
void check(char *point, char *pointan, char buffer[50], int j);


int main()
{
	fopen_s(&fin, "INPUT.txt", "r");
	fopen_s(&fout, "OUTPUT.txt", "w");
	
	input(buff);
	
	int i = 0;

	//   buff[countstr - 1][place-1] -> the end
	
	for (i = 0; i < countstr; ++i)// strings to up
	{
		int place = placement(buff[i]);
		g = 0;
		
		char *point = &buff[i][place - 1]; // from the end of string

		search(buff[i], point);
	}


	system("pause");
}



void input(char buff[840][50])
{
	int i(0);
	for (; i < countstr; ++i)
	{
		fgets(buff[i], 50, fin);
		fputs(buff[i], fout);
	}
}

int placement(char buffer[])
{
	int count = 0;
	while (buffer[count])
		count++;
	return count;
}

void search(char buffer[50], char *point)
{
	while (point!=buffer)
	{
		if (isalpha(*point))
		{
			for (int j(0);j<countstr;++j)
			{
				int loc = placement(buff[j]);

				char *pointan = &buff[j][loc-1];

				while (pointan != &buff[j][0])
				{
					check(point, pointan, buffer, j);
				}
			}
		}
		else point--;
	}
}

void check(char *point, char *pointan, char buffer[50], int j)
{
	if (isalpha(*pointan))
		if ((*point == *pointan) && ((*point--) == *(pointan--)))
		{
			strcpy_s(cont[g], buffer);
			strcpy_s(cont[g + 2], buff[j]);
			g++;
		}
		else
			pointan--;
}
