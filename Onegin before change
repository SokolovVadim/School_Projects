#include <iostream>
#include <string>
#include <cstdlib>
//using namespace std;



void ad(FILE *fout);

void input(char *buff, short size, FILE *fin, FILE *fout);

short sizeof_file(FILE *fin);

short count_str(char *buff, short size, FILE *fin, FILE *fout);

short* Choose_Point(char *buff, short *numbers_of_str,
	short count_of_str, short size, FILE *fin, FILE *fout);

void Mistakes_Checker(char *buff, short size, FILE *fin, FILE *fout);

int Compare_Function(const void *name1, const void *name2);

void sort_print(char ** arrpoints, short count_of_str, FILE *fout);

void End(FILE *fout);


int main()
{
	FILE *fin, *fout;
	fopen_s(&fin, "INPUT.txt", "r");
	fopen_s(&fout, "OUTPUT.txt", "w");

	ad(fout);

	
	if (!fin)
	{
		fprintf(fout, "File was not open");
	}
	else
	{
		short sizebuff = sizeof_file(fin) + 1;
		if (sizebuff)
		{
			char *buff = (char*)calloc(sizebuff, sizeof(char));// ++

			input(buff, sizebuff, fin, fout);

			short count_of_str = count_str(buff, sizebuff, fin, fout);

			if (count_of_str != 1)
				count_of_str++;

			char **arrpoints = new char*[count_of_str];

			short *numbers_of_str = new short[count_of_str];
			// array with the way between pointers

			numbers_of_str = Choose_Point(buff, numbers_of_str, count_of_str,
				sizebuff, fin, fout);

			for (int counter(0); counter < count_of_str; ++counter)
				arrpoints[counter] = &buff[numbers_of_str[counter]];

			qsort(arrpoints, count_of_str, sizeof(char *), Compare_Function);

			End(fout);

			sort_print(arrpoints, count_of_str, fout);

			// !!!!!! if in real count_of_str==0  we get count_of_str==1

			free(buff);
			delete numbers_of_str;
		}
		else
		{
			fprintf(fout, "\n\tThis buffer has no simbols!"
				"\n\tPlease put the text into the buffer.\n");
		}

	}
	
	
	fclose(fin);
	fclose(fout);
}


void ad(FILE *fout)
{
	fprintf(fout, "\t\t\t\tThis function can sort strings.\n"
		"\t\t\tPlease put the text into the file \"INPUT.txt\".\n");
}



short sizeof_file(FILE *fin)
{
	fseek(fin, 0, SEEK_END);

	short size(ftell(fin));

	fseek(fin, 0, SEEK_SET);

	return size;
}


void input(char *buff, short size, FILE *fin, FILE *fout)
{
	fread(buff, sizeof(char), size, fin);
}


short count_str(char *buff, short size, FILE *fin, FILE *fout)
{
	short count_of_str(0);
	for (short counter(0); counter<size; counter++)
		if (buff[counter] == '\n')
		{
			count_of_str++;
			buff[counter] = '\0';
		}
	return count_of_str;
}


short number_str(char *buff, short size, FILE *fin, FILE *fout)
{
	short count_str(0);
	for (short counter(0); counter<size; counter++)
		if (buff[counter] == '\n')
		{
			count_str++;
			buff[counter] = '\0';
		}
	return count_str;
}


short* Choose_Point(char *buff, short *numbers_of_str,
	short count_of_str, short size, FILE *fin, FILE *fout)
{

	short count_points(1);
	numbers_of_str[0] = 0;

	for (short counter(1); counter < size; ++counter)
	{
		if ((buff[counter] == '\0')&&(count_points<count_of_str))// !!!!!!!
		{
			numbers_of_str[count_points] = counter + 1;
			count_points++;
		}

	}
	return (numbers_of_str);
}




void Mistakes_Checker(char *buff, short size, FILE *fin, FILE *fout)
{
	for (short counter(0); counter < size; ++counter)
		fprintf(fout, "%s\n", buff[counter]);
}


int Compare_Function(const void *point_char1, const void *point_char2)
{
	const char *str1 = *(const char **)point_char1;
	const char *str2 = *(const char **)point_char2;
	return strcmp(str1, str2);
}

void End(FILE *fout)
{
	fprintf(fout, "\nText after sort:\n\n");
}

void sort_print(char ** arrpoints, short count_of_str, FILE *fout)
{
	for (int counter(0); counter < count_of_str; ++counter)
		fprintf(fout, "%s\n", arrpoints[counter]);
}



